/*
Here I will present some basics of testing by using 'assertions'. This topic will most likely be developed in the future
(annotations, methods, automations, best practices etc).
I am already starting to write it using chapters to make it more easy to read when it grows in lines.
*/

*****************************************************************************************************************************
1) Introduction

First of all we all have to be aware how important testing is - it may save us a lot of trouble (and money) at the very early 
stage of our project. 
Being into programming for a while You will eventually hear about UnitTests - so, what are they? We could say that UnitTests
represent specific approach to software testing, where we split our code into smaller pieces (classes, methods etc.) and 
test these pieces separately. Conducting our tests using this method allows us not only to have better control over the
result (it is easier to figure out what was wrong and do the improvement when we have 100 lines of code rather
than 1000 or more), but also to reuse majority of our tests in the future, when our software/application will be developed 
(we'll have to create/recreate UnitTests only for new/updated 'units').

*****************************************************************************************************************************
2) Bases of using JUnit and Assertions

So now the fun begins, how does basic testing look like in the code?
At first You got to get familiar with Library called JUnit (You can either download it or add as a dependency to Your 
project - it is essential for our purpose. Details might be check out here: https://junit.org). This library contains set of 
'Assertions' which are an amazing tool for simplifying testing process. I will give You an example on how some basic testing 
code looks like and then I will break it down into pieces to decribe each one of them.

----------------------------------------------------------------------

public class Assertions {

    @Test
    public static void assertTests(){
        int var1 = 1;
        int var2 = 2;
        int var3 = 3;

        assertEquals(var1, var3);

        assertTrue(var1 < var2);
    }
}


public class MainTest {
    public static void main(String[] args){
        Assertions.assertTests();
    }
}

----------------------------------------------------------------------

It is as simple as this! Right now I just want to mention that testing code snippets are usually placed in specific 'test' 
folder in our project tree. It is very convenient to separate tests from actual programm/application at the early stage.

Back to the code - we can distinguish few elements in the above snippet:
 I)   Assertions class
 II)  Asserting methods (assertNotEquals, assertTrue)
 III) @Test annotation
 IV)  Main class triggering the Assertion
 
I) Assertion class
This is main class containing assertions (tests) connected with specific group of our choice. For example: in our project
we have class called 'Calc' containing calculating methods (might be for accounting purposes). We should keep all of our
asserting methods for this class in one 'MainTestingClass' (something like CalcTest, CalcAssertions etc.)

II) Asserting methods (assertEquals, assertTrue)
These are methods provided by 'JUnit' library by importing 'static org.junit.Assert.*'. These are only examples, but there is
a lot more to explore in this Library - at this point we want to keep it easy and simple, so just to give You overall idea
on how it is working, I am giving You these two methods.

assertEquals(var1, var2) - checks if given arguments are equal
assertTrue(var1 < var2) - checks if given 'bool' condition is true

See how simple it is?

III) @Test annotation
At first You need to know that it is not the only annotation we can use, but again - in this chapter we are just scratching 
the surface of the power behind JUnit.
This particular annotation is very important as it basically informs that method written under it is a testing method 
(assertTests() in our case). In our Testing class we can have as many methods with @Test annotation above them, as we want. 
It is a good practice to name these methods clearly. 

Using the example from point 'II' - lets say that in our 'Calc' class we've implemented few methods named: net, gross, discount. 
It would be very unclear if we would test these functionalities in testing methods: test1, test2 and test3. It is much easier
to reuse our tests and keep the code clean by using more appropriate names, like: netTest, grossTest, discountTest etc.

There are other annotations available (@Before, @After and more) which give us some sort of control over the life-cycle of our 
test. Using them we can provide initiating certain variables before the proper testing (@Test annotated methods) have started
or clean up the mess after testing is done.

IV) Main class triggering the Assertion
Not the only way to trigger Asserting classes/methods, but probably the easiest one - simply call the method(s) from Assertion
class. If there is any Error - testing is not passed. If programm finished its work without any Error - testing is passed.
EASY!

It is worth mentioning that not always we want to test if some variables are equal or if some condition is true. Sometimes 
we might need to check if something if different or false - such Test is also possible with JUnit functionalities.



